package de.mobile2power.tcpmavlink2uasmqtt;

import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import org.junit.Test;

public class MQTTConnectorTest {

	MQTTConnector connector = new MQTTConnector(0);
	byte[] expecteds = { (byte) 0xFE, 0x09, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };
	
	
	@Test
	public void copyStream_withGarbageStart() throws IOException {
		byte[] source = { 0x00, 0x00, (byte) 0xFE, 0x09, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };
		ByteArrayInputStream bis = new ByteArrayInputStream(source);
		
		byte[] result = connector.copyStream(bis);
		
		assertArrayEquals(expecteds, result);
	}

	@Test
	public void copyStream_withBrokenPackageAtStart() throws IOException {
		byte[] source = { (byte) 0xFE, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, (byte) 0xFE, 0x09, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, (byte) 0xFE, 0x09, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };
		ByteArrayInputStream bis = new ByteArrayInputStream(source);
		
		byte[] invalidResult = connector.copyStream(bis);
		byte[] validResult = connector.copyStream(bis);
		
		assertArrayEquals(expecteds, validResult);
	}

	@Test
	public void copyStream_withGarbageStartAndEnd() throws IOException {
		byte[] source = { 0x00, 0x00, (byte) 0xFE, 0x09, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, (byte) 0xAE, 0x02 };
		ByteArrayInputStream bis = new ByteArrayInputStream(source);
		
		byte[] result = connector.copyStream(bis);
		
		assertArrayEquals(expecteds, result);
	}
	
	@Test
	public void copyStream_withoutGarbage() throws IOException {
		byte[] source = { (byte) 0xFE, 0x09, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };
		ByteArrayInputStream bis = new ByteArrayInputStream(source);
		
		byte[] result = connector.copyStream(bis);
		
		assertArrayEquals(expecteds, result);
	}

	@Test
	public void copyStream_callItTwice() throws IOException {
		byte[] source = { (byte) 0xFE, 0x09, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, (byte) 0xFE, 0x09, 0x0B, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };
		ByteArrayInputStream bis = new ByteArrayInputStream(source);
		byte[] secondExpecteds = { (byte) 0xFE, 0x09, 0x0B, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };
		
		connector.copyStream(bis);
		byte[] secondResult = connector.copyStream(bis);
		
		assertArrayEquals(secondExpecteds, secondResult);
	}

	@Test
	public void copyStream_longPacket() throws IOException {
		byte[] expected = { (byte) 0xFE, (byte)0x0B, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19 };
		byte[] source = { (byte) 0xFE, (byte)0x0B, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, (byte) 0xFE, 0x09, 0x0B, 0x04 };
		ByteArrayInputStream bis = new ByteArrayInputStream(source);
		
		byte[] result = connector.copyStream(bis);
		
		assertArrayEquals(expected, result);
	}
}
